Create a new file server.js which will have the code for the CRUD API which will have four endpoints:

GET /accounts
POST /accounts
PUT /accounts/:id
DELETE /accounts/:id

Our project will leverage a few npm modules which are Express middleware (plugins):

morgan: logging of the server requests in various formats for debugging, auditing and other purposes
body-parser: parsing of the incoming request body/payload into a Node object from a string or other formats
errorhandler: basic user friendly error messaging
mongodb: module to connect and work with MongoDB database

npm i express morgan mongodb errorhandler -E

Next, define the MongoDB connection string for the local database instance and the database name edx-course-db. Also apply middleware for logging and body parsing:

Connect to the database using the connect method and the connection URI (url). 
Define all routes in a callback using the MongoDB native driver methods starting with GET /accounts in which you will use sort to sort the query 
result in reverse ObjectID order and toArray to get an array of accounts.

In the route for POST /accounts, take data from the request body (req.body) and use it in insert to create a new account. 
Optionally, validate and sanitize the data of the request body with if/else statements or the express-validate module.

For the PUT route, define a URL parameter :id and access it with req.params.id. 
Use req.body (request body) to pass the new account to the update method. 
Use mongodb.ObjectID with req.params.id to convert the string ID to an ObjectID which is needed for the update method query:

In DELETE, use URL parameter for the ID again. 
This time, the MongoDB method is remove but it also takes the URL parameter ID wrapped in mongodb.ObjectID for the proper object type in the query.
